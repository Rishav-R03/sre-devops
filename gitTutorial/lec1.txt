GIT and GITHUB 
    Git is a software for version control system. It is like a checkpointing method while building application.
    GitHub is a web-based hosted service to host the Git.

    Version control systems are used to track the new updates of an application. 

git --version: to know the current version of git 
git status: to know the current status of git(staged/unstaged)
    red: untracked 
    green: tracking 

creating repository 
    #1. git status 
    #2. git init (if no repository is already initialised)
        it creates a hidden folder .git which can be seen through
        ls -la command
    #3. git add <filename1> <filename2> etc: send files to staging area 
        git add . or git add -A: adds all files and folders to staging area 

    #4. git rm --filename: to unstage the files 
    #5. git commit -m "message": to commit the all staged file 
        git commit <filename> for manual and specific message 

    #6. git log: very important and complex command 
        instead use git log --oneline 
    
    #7. comments are written in present tense, imperative 
    
    #8. use .gitignore file to avoid pushing secrets to git push 
        it will not get staged and not leak your personal details

    #9. .gitkeep is a file to keep empty folder, because empty folders are not tracked 

    #10. git stores data in form of blob objects but kind of snapshots 
    
    #11. Three musketeers of git 
        a> commit objects 
        b> tree objects
        c> blob objects 

        a> commit objects 
            i> Tree object 
            ii> Parent commit object 
            iii> Author 
            iv> Committer 
            v> Commit message 
        
        b> Tree Objects 
            i> File mode 
            ii> File name 
            iii> File hash 
            iv> Parent tree object 

        c> blob object 
            commit ->tree -> blob 

    #12. git log --oneline 
        git show -s --pretty=raw <enter an id from above command> 
        git ls -tree: shows the tree object 

    #13. Git branches   